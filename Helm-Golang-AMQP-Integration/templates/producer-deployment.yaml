apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ lower .Chart.Name }}-{{ .Values.producer.deploymentName }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.producer.replicaCount }}
  template:
    metadata:
      labels:
{{ include "GolangAMQP.producer.podLabels" . | indent 8}}
    spec:
      initContainers:
      - name: producer-init-container
        image: 
        command: ['sh', '-c', "until nc -zv {{ include "GolangAMQP.RabbitMQ.serviceName" . }}.{{ .Release.Namespace}}.svc.cluster.local {{ .Values.rabbitMQ.service.serverPort }}; do echo Waiting for RabbitMQ; sleep 2; done"]
      containers:
      - name: producer-container
        image: {{ .Values.producer.image }}
        args:
        - "server"
{{ include "GolangAMQP.producer.env" . | indent 8}}
        imagePullPolicy: {{ .Values.producer.imagePullPolicy }}
        livenessProbe:
{{ include "GolangAMQP.producer.healthCheck" . | indent 10}}
        readinessProbe:
{{ include "GolangAMQP.producer.healthCheck" . | indent 10}}
        volumeMounts:
        - name: {{ lower .Chart.Name }}-volume-01
          mountPath: {{ .Values.producer.env.BASE_PATH }}
      volumes:
      - name: {{ lower .Chart.Name }}-volume-01
        persistentVolumeClaim:
          claimName: golang-amqp-integration-pvc
  selector:
    matchLabels:
{{ include "GolangAMQP.producer.podLabels" . | indent 6 }}
